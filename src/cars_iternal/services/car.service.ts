import { BadRequestException, ForbiddenException, HttpStatus, Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { In, Repository, SelectQueryBuilder } from 'typeorm';
import { CarIternal } from '../entities/index';
import { CarBrandIternal } from 'src/auta_brands_iternal_cars/entities';
import { CarModelIternar } from 'src/auto_model_iternal/entities';
import { EngineModel } from 'src/engine_type/entities/engine.entity';
import { CountryModel } from 'src/country/entities/country.entity';
import { BodyModel } from 'src/body_type/entities/body.entity';
import { GearModel } from 'src/gear_box/entities/gear.entity';
import { TechnologyAutoModel } from 'src/technology_avto/entities';
import { CityModel } from 'src/city/entities';
import { CreateCarDto } from '../dto/create-car.dto';
import { Cache } from 'cache-manager';
import { Inject } from '@nestjs/common';
import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { CountryManufacturerModel } from 'src/country_manufacturer/entities'
import { StorageService } from '../../shared/storage/s3.service'

import * as fs from 'fs';
import * as path from 'path';
import {
  paginate,
  Pagination,
  IPaginationOptions,
} from 'nestjs-typeorm-paginate';
import { GetCarListDto } from '../dto/get-car-list.dto';
import { CarLikeEntity } from '../entities/car-like.entity';
import { CarPriceHistory, PriceChangeType } from '../entities/car-price-history.entity';
import { UpdateCarDto } from '../dto/update-car.dto';
import { UpdateCarPriceDto } from '../dto/update-price.dto';

interface UserSub {
  sub: number,
  role: string
}


@Injectable()
export class CarService {
  constructor(
    @InjectRepository(CarIternal) private readonly carRepository: Repository<CarIternal>,
    @InjectRepository(CarBrandIternal)
    private readonly brandRepository: Repository<CarBrandIternal>,
    @InjectRepository(CarModelIternar)
    private readonly modelRepository: Repository<CarModelIternar>,
    @InjectRepository(CountryManufacturerModel)
    private readonly countryRepository: Repository<CountryManufacturerModel>,
    @InjectRepository(EngineModel)
    private readonly engineRepository: Repository<EngineModel>,
    @InjectRepository(BodyModel)
    private readonly bodyRepository: Repository<BodyModel>,
    @InjectRepository(CarPriceHistory)
    private readonly priceHistoryRepo: Repository<CarPriceHistory>,
    @InjectRepository(GearModel)
    private readonly gearRepository: Repository<GearModel>,
    @InjectRepository(GearModel)
    private readonly cityRepository: Repository<CityModel>,
    @InjectRepository(CarLikeEntity)
    private readonly likeRepo: Repository<CarLikeEntity>,
    @InjectRepository(TechnologyAutoModel)
    private readonly technologyRepository: Repository<TechnologyAutoModel>,
    private readonly storageService: StorageService,

    @Inject(CACHE_MANAGER) private cacheManager: Cache,
    // cityRepository
  ) { }
  private buildListQuery(
    filters: GetCarListDto,
    currentUser?: UserSub,
    withCounts = true,          // üëà –Ω–æ–≤—ã–π —Ñ–ª–∞–≥
  ) {
    const qb = this.carRepository
      .createQueryBuilder('car')
      .leftJoinAndSelect('car.brand', 'brand')
      .leftJoinAndSelect('car.model', 'model')
      .leftJoinAndSelect('car.country', 'country')
      .leftJoinAndSelect('car.engineType', 'engine')
      .leftJoinAndSelect('car.bodyType', 'body')
      .leftJoinAndSelect('car.gearBox', 'gear')
      .leftJoinAndSelect('car.technologies', 'tech')
      .leftJoinAndSelect('car.city', 'city') // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      .where('car.moderated = :moderated', { moderated: true })

    /* ... —Ñ–∏–ª—å—Ç—Ä—ã ... */
    if (filters.brandId)
      qb.andWhere('brand.id = :brandId', { brandId: filters.brandId })

    if (filters.countryId?.length)
      qb.andWhere('country.id IN (:...countryIds)', {
        countryIds: filters.countryId,
      })
if (filters.numberOfSeats)
  qb.andWhere('car.numberOfSeats = :numberOfSeats', {
    numberOfSeats: filters.numberOfSeats,
  })



    if (filters.engineTypeId?.length)
      qb.andWhere('engine.id IN (:...engineTypeIds)', {
        engineTypeIds: filters.engineTypeId,
      })

    if (filters.bodyTypeId?.length)
      qb.andWhere('body.id IN (:...bodyTypeIds)', {
        bodyTypeIds: filters.bodyTypeId,
      })

    if (filters.gearBoxId?.length)
      qb.andWhere('gear.id IN (:...gearBoxIds)', {
        gearBoxIds: filters.gearBoxId,
      })

    /* ---------- —Ñ–∏–ª—å—Ç—Ä—ã-–¥–∏–∞–ø–∞–∑–æ–Ω—ã ---------- */
    if (filters.priceFromMin)
      qb.andWhere('car.price >= :priceFromMin', {
        priceFromMin: filters.priceFromMin,
      })
    if (filters.priceFromMax)
      qb.andWhere('car.price <= :priceFromMax', {
        priceFromMax: filters.priceFromMax,
      })

    if (filters.mileageMin)
      qb.andWhere('car.mileage >= :mileageMin', {
        mileageMin: filters.mileageMin,
      })
    if (filters.mileageMax)
      qb.andWhere('car.mileage <= :mileageMax', {
        mileageMax: filters.mileageMax,
      })

    if (filters.yearMin)
      qb.andWhere('car.year >= :yearMin', { yearMin: filters.yearMin })
    if (filters.yearMax)
      qb.andWhere('car.year <= :yearMax', { yearMax: filters.yearMax })

    /* --- –ª–∞–π–∫–∏ –∏ isLiked --- */
    if (withCounts) {
      qb.loadRelationCountAndMap('car.likesCount', 'car.likes')

      console.log(currentUser, 'currentUser')

      if (currentUser) {
        qb.loadRelationCountAndMap(
          'car._isLikedTmp',
          'car.likes',
          'my_like',
          sub => sub.where('my_like.user_id = :uid', { uid: currentUser.sub }),
        )
      }
    }

    return qb
  }

  async updateCar(
    id: number,
    dto: UpdateCarDto,
    avatarFile: Express.Multer.File | undefined,
    files: Express.Multer.File[] | undefined,
    user: any,
  ): Promise<CarIternal> {
    const car = await this.carRepository.findOne({
      where: { id },
      relations: ['createdBy'],
    })

    if (!car) throw new NotFoundException('–ê–≤—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

    // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if (car.createdBy.id !== user.sub) {
      throw new ForbiddenException('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∞–≤—Ç–æ')
    }

    // üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
    if (dto.price !== undefined && dto.price !== car.price) {
      const changeType: PriceChangeType =
        dto.price > car.price ? 'increase' : 'decrease'

      await this.priceHistoryRepo.save(
        this.priceHistoryRepo.create({
          car,
          price: car.price,
          changeType,
        }),
      )
    }

    // üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏ –∞–≤–∞—Ç–∞—Ä–∞
    const avatarUrl = avatarFile ? `/uploads/cars/${avatarFile.filename}` : car.avatar
    const photoUrls = Array.isArray(files)
      ? files.map(f => `/uploads/cars/${f.filename}`)
      : car.photos

    // üß† –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã
    const [
      model,
      brand,
      country,
      city,
      engine,
      body,
      gear,
      technologies,
    ] = await Promise.all([
      dto.modelId ? this.modelRepository.findOne({ where: { id: dto.modelId } }) : car.model,
      dto.brandId ? this.brandRepository.findOne({ where: { id: dto.brandId } }) : car.brand,
      dto.countryId ? this.countryRepository.findOne({ where: { id: dto.countryId } }) : car.country,
      dto.cityId ? this.cityRepository.findOne({ where: { id: dto.cityId } }) : car.city,
      dto.engineTypeId ? this.engineRepository.findOne({ where: { id: dto.engineTypeId } }) : car.engineType,
      dto.bodyTypeId ? this.bodyRepository.findOne({ where: { id: dto.bodyTypeId } }) : car.bodyType,
      dto.gearBoxId ? this.gearRepository.findOne({ where: { id: dto.gearBoxId } }) : car.gearBox,
      dto.technologyIds ? this.technologyRepository.findBy({ id: In(dto.technologyIds) }) : car.technologies,
    ])

    // üß© –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    Object.assign(car, {
      hpCount: dto.hp_count ?? car.hpCount,
      numberOfSeats: dto.number_of_seats ?? car.numberOfSeats,
      color: dto.color ?? car.color,
      vinCode: dto.vin_code ?? car.vinCode,
      enginePower: dto.engine_power ?? car.enginePower,
      mileage: dto.mileage ?? car.mileage,
      year: dto.year ?? car.year,
      price: dto.price ?? car.price,
      creditPosible: dto.credit_posible ?? car.creditPosible,
      barterPosible: dto.barter_posible ?? car.barterPosible,
      crashed: dto.crashed ?? car.crashed,
      collored: dto.collored ?? car.collored,
      needsRenovation: dto.needs_renovation ?? car.needsRenovation,
      userName: dto.user_name ?? car.userName,
      userEmail: dto.user_email ?? car.userEmail,
      userPhone: dto.user_phone ?? car.userPhone,
      description: dto.description ?? car.description,
      moderated: false, // –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      avatar: avatarUrl,
      photos: photoUrls,
      videoLink: dto.videoLink ?? car.videoLink,
      model,
      brand,
      country,
      city,
      engineType: engine,
      bodyType: body,
      gearBox: gear,
      technologies,
    })

    return this.carRepository.save(car)
  }
  async updatePriceOnly(
    id: number,
    dto: UpdateCarPriceDto,
    user: any,
  ): Promise<CarIternal> {
    const car = await this.carRepository.findOne({
      where: { id },
      relations: ['createdBy'],
    })

    if (!car) {
      throw new NotFoundException('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    if (car.createdBy.id !== user.sub) {
      throw new ForbiddenException('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —ç—Ç–æ–π –º–∞—à–∏–Ω—ã')
    }

    // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (dto.price === car.price) return car

    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
    const changeType = dto.price > car.price ? 'increase' : 'decrease'

    await this.priceHistoryRepo.save(
      this.priceHistoryRepo.create({
        car,
        price: car.price,
        changeType,
      }),
    )

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É
    car.price = dto.price

    return this.carRepository.save(car)
  }
  async findByAuthor(currentUser: UserSub): Promise<CarIternal[]> {
    const userId = Number(currentUser?.sub)

    if (!userId || isNaN(userId)) {
      throw new BadRequestException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }

    const qb = this.carRepository
      .createQueryBuilder('car')
      .leftJoinAndSelect('car.brand', 'brand')
      .leftJoinAndSelect('car.model', 'model')
      .leftJoinAndSelect('car.country', 'country')
      .leftJoinAndSelect('car.engineType', 'engine')
      .leftJoinAndSelect('car.bodyType', 'body')
      .leftJoinAndSelect('car.gearBox', 'gear')
      .leftJoinAndSelect('car.technologies', 'tech')
      .leftJoinAndSelect('car.city', 'city')
      .where('car.createdBy = :userId', { userId })
      .andWhere('car.deleted IS NOT TRUE') // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å soft delete
      .loadRelationCountAndMap('car.likesCount', 'car.likes')
      .loadRelationCountAndMap(
        'car._isLikedTmp',
        'car.likes',
        'my_like',
        sub => sub.where('my_like.user_id = :uid', { uid: userId }),
      )

    return this.mapIsLiked(qb, currentUser)
  }

  async findLikedByUser(currentUser: UserSub): Promise<CarIternal[]> {
    console.log('currentUser:', currentUser)
    console.log('currentUser.sub:', currentUser?.sub, typeof currentUser?.sub)

    const userId = Number(currentUser?.sub)

    if (!userId || isNaN(userId)) {
      throw new BadRequestException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }
    console.log('üö® currentUser.sub –≤ cars:', currentUser?.sub, typeof currentUser?.sub)
    const qb = this.carRepository
      .createQueryBuilder('car')
      .innerJoin('car.likes', 'like', 'like.user_id = :userId', {
        userId: currentUser.sub,
      })
      .leftJoinAndSelect('car.brand', 'brand')
      .leftJoinAndSelect('car.model', 'model')
      .leftJoinAndSelect('car.country', 'country')
      .leftJoinAndSelect('car.engineType', 'engine')
      .leftJoinAndSelect('car.bodyType', 'body')
      .leftJoinAndSelect('car.gearBox', 'gear')
      .leftJoinAndSelect('car.technologies', 'tech')
      .leftJoinAndSelect('car.city', 'city')
      .loadRelationCountAndMap('car.likesCount', 'car.likes')
      .loadRelationCountAndMap(
        'car._isLikedTmp',
        'car.likes',
        'my_like',
        sub => sub.where('my_like.user_id = :uid', { uid: userId }),
      )
      .where('car.moderated = :moderated', { moderated: true })
      .andWhere('car.deleted = false')


    return this.mapIsLiked(qb, currentUser)
  }
  async getPriceHistory(carId: number): Promise<CarPriceHistory[]> {
    const car = await this.carRepository.findOne({ where: { id: carId } })
    if (!car) {
      throw new NotFoundException('–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }

    return this.priceHistoryRepo.find({
      where: { car: { id: carId } },
      order: { changedAt: 'DESC' },
    })
  }
  /* ------------------------------------------------------------------ */
  /* 2. helper: –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º _isLikedTmp ‚Üí isLiked:boolean                */
  /* ------------------------------------------------------------------ */
  private async mapIsLiked(
    qb: SelectQueryBuilder<CarIternal>,
    currentUser?: UserSub,
  ) {
    const items = await qb.getMany()
    if (currentUser) {
      items.forEach((c: any) => {
        c.isLiked = !!c._isLikedTmp
        delete c._isLikedTmp
      })
    }
    return items
  }

  /* ------------------------------------------------------------------ */
  /* 3. –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ list + –ø–∞–≥–∏–Ω–∞—Ü–∏—è                                 */
  /* ------------------------------------------------------------------ */
  async findAll(filters: GetCarListDto, currentUser?: UserSub) {
    const { page, limit } = filters

    // 1) QB —Å–æ —Å—á—ë—Ç—á–∏–∫–∞–º–∏ ‚Äî –¥–ª—è —Å–∞–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageQB = this.buildListQuery(filters, currentUser, true)
      .skip((page - 1) * limit)
      .take(limit)

    const items = await this.mapIsLiked(pageQB, currentUser)

    // 2) QB –±–µ–∑ —Å—á—ë—Ç—á–∏–∫–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—â–µ–≥–æ total
    const total = await this.buildListQuery(filters, undefined, false)
      .getCount()

    return {
      items,
      meta: {
        totalItems: total,
        itemCount: items.length,
        itemsPerPage: limit,
        totalPages: Math.ceil(total / limit),
        currentPage: page,
      },
    }
  }




  async toggleLike(carId: number, user: any) {
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∞–π–∫
    const existing = await this.likeRepo.findOne({
      where: { car: { id: carId }, user: { id: user.sub } },
    })

    if (existing) {
      await this.likeRepo.remove(existing)          // üëà –∞–Ω–ª–∞–π–∫
    } else {
      await this.likeRepo.save(
        this.likeRepo.create({
          car: { id: carId } as any,
          user: { id: user.sub } as any,
        }),
      )                                             // üëà –ª–∞–π–∫
    }

    // –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const likesCount = await this.likeRepo.count({
      where: { car: { id: carId } },
    })

    return { liked: !existing, likesCount }
  }

  async findAllNoModerated(user: any): Promise<CarIternal[]> {
    // 1) –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN
    if ((!user) || (user && user.role !== 'ADMIN')) {
      throw new ForbiddenException('Access denied');
    }

    // 2) –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä JOIN‚Äô–æ–≤, –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ
    return this.carRepository
      .createQueryBuilder('car')
      .leftJoinAndSelect('car.brand', 'brand')
      .leftJoinAndSelect('car.model', 'model')
      .leftJoinAndSelect('car.country', 'country')
      .leftJoinAndSelect('car.engineType', 'engine')
      .leftJoinAndSelect('car.bodyType', 'body')
      .leftJoinAndSelect('car.gearBox', 'gear')
      .leftJoinAndSelect('car.city', 'city')
      .leftJoinAndSelect('car.technologies', 'tech')
      .where('car.moderated = :moderated', { moderated: false })
      .getMany();
  }

  async uploadVideoToS3(serviceId: number, videoFile: Express.Multer.File) {
    const videoUrl = await this.storageService.uploadCarVideo(videoFile)


    await this.carRepository.update(serviceId, { videoLink: videoUrl, moderated: false, })

    return { success: true, url: videoUrl }
  }

  async findOne(id: number): Promise<CarIternal> {
    return this.carRepository.findOne({
      where: { id },
      relations: [
        'brand',
        'model',
        'country',
        'engineType',
        'bodyType',
        'gearBox',
        'technologies'
      ],
    });
  }


  async remove(id: number): Promise<{ message: string }> {
    const car = await this.carRepository.findOne({ where: { id } });

    if (!car) {
      throw new Error('Car not found');
    }

    // ‚úÖ –£–¥–∞–ª–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–ª–æ–∫–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å)
    // const allPhotoPaths = [...(car.photos || []), car.avatar].filter(Boolean);

    // for (const photoPath of allPhotoPaths) {
    //   const fileName = photoPath.split('/').pop();
    //   const fullPath = path.join(__dirname, '../../../uploads/cars', fileName);

    //   if (fs.existsSync(fullPath)) {
    //     fs.unlinkSync(fullPath);
    //   }
    // }

    // await this.carRepository.remove(car);
    car.deleted = true;
    await this.carRepository.save(car);

    return { message: `–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID ${id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–π` };
  }
  async isCreatedByUser(carId: number, user: any): Promise<boolean> {
    const service = await this.carRepository.findOne({
      where: { id: carId },
      relations: ['createdBy'],
    })

    if (!service) {
      throw new BadRequestException('Service not found')
    }

    return service.createdBy.id === user.id
  }
  private raiseFieldError(field: string, message: string): never {
    throw new BadRequestException(
      {
        statusCode: HttpStatus.BAD_REQUEST,
        errors: [{ field, message }],
      },
      'ValidationError',
    )
  }

  async moderateService(id: number, user: any): Promise<CarIternal> {
    if (user.role !== 'ADMIN') {
      throw new ForbiddenException('Access denied')
    }

    const service = await this.carRepository.findOne({ where: { id } })
    if (!service) {
      throw new NotFoundException('Service not found')
    }

    service.moderated = true
    return this.carRepository.save(service)
  }

  async create(
    dto: CreateCarDto,
    avatarFile: Express.Multer.File | undefined,
    files: Express.Multer.File[] | undefined,
    user: any
  ): Promise<CarIternal> {

    /* ---------- 1. –∞–Ω—Ç–∏-—Å–ø–∞–º ---------- */
    const pending = await this.carRepository.findOne({
      select: ['id'],
      where: { createdBy: { id: user.sub }, moderated: false },
    })
    if (pending) {
      throw new ForbiddenException(
        '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ–∂–∏–¥–∞—é—â–µ–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.',
      )
    }
    /* ---------- –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ---------- */
    const [
      model,
      brand,
      country,
      city,
      engine,
      body,
      gear,
      technologies,
    ] = await Promise.all([
      this.modelRepository.findOne({ where: { id: dto.modelId } }),
      this.brandRepository.findOne({ where: { id: dto.brandId } }),
      this.countryRepository.findOne({ where: { id: dto.countryId } }),
      this.cityRepository.findOne({ where: { id: dto.cityId } }),
      this.engineRepository.findOne({ where: { id: dto.engineTypeId } }),
      this.bodyRepository.findOne({ where: { id: dto.bodyTypeId } }),
      this.gearRepository.findOne({ where: { id: dto.gearBoxId } }),
      this.technologyRepository.findBy({ id: In(dto.technologyIds) }),
    ])

    /* --- –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç, –∫–∏–¥–∞–µ–º 400 --- */
    if (!model) this.raiseFieldError('modelId', '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    if (!brand) this.raiseFieldError('brandId', '–ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
    if (!country) this.raiseFieldError('countryId', '–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    if (!city) this.raiseFieldError('cityId', '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
    if (!engine) this.raiseFieldError('engineTypeId', '–î–≤–∏–≥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    if (!body) this.raiseFieldError('bodyTypeId', '–ö—É–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω')
    if (!gear) this.raiseFieldError('gearBoxId', '–ö–ü–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    if (!technologies) this.raiseFieldError('technologyId', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

    /* ---------- –º–µ–¥–∏–∞ ---------- */
    const avatarUrl = avatarFile ? `/uploads/cars/${avatarFile.filename}` : null
    const photoUrls = Array.isArray(files)
      ? files.map(f => `/uploads/cars/${f.filename}`)
      : []

    /* ---------- —Å–æ–∑–¥–∞—ë–º —Å—É—â–Ω–æ—Å—Ç—å ---------- */
    const car = this.carRepository.create({
      /* scalar */
      hpCount: dto.hp_count,
      numberOfSeats: dto.number_of_seats,
      color: dto.color,
      vinCode: dto.vin_code,
      enginePower: dto.engine_power,
      mileage: dto.mileage,
      year: dto.year,
      price: dto.price,
      creditPosible: dto.credit_posible,
      barterPosible: dto.barter_posible,
      crashed: dto.crashed,
      collored: dto.collored,
      needsRenovation: dto.needs_renovation,
      userName: dto.user_name,
      userEmail: dto.user_email,
      userPhone: dto.user_phone,
      description: dto.description,
      moderated: dto.moderated,

      /* relations */
      brand,
      model,
      country,
      city,
      engineType: engine,
      bodyType: body,
      gearBox: gear,
      technologies,

      /* media */
      avatar: avatarUrl,
      photos: photoUrls,
      videoLink: dto.videoLink,

      createdBy: user,            // ENTIRE User entity
    })

    /* ---------- –∫—ç—à ---------- */
    await this.cacheManager.del('cars_all')

    return this.carRepository.save(car)
  }

}
